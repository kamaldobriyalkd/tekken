{"version":3,"sources":["components/fighters/Paul Phoenix.jpg","components/fighters/Julia Chang.png","components/fighters/Jin Kazama.png","components/fighters/Hwoarang.jpg","components/fighters/Nina Williams.jpg","components/fighters/King.jpg","components/fighters/Yoshimitsu.jpg","components/fighters/Marshall Law.jpg","components/fighters/Ling Xiaoyu.jpg","components/fighters/Lei Wulong.jpg","components/fighters/Eddy Gordo.jpg","components/fighters/Heihachi Mishima.jpg","components/fighters/Anna Williams.jpg","components/fighters/Mokujin.jpg","components/fighters/Gun Jack.jpg","components/fighters/Bryan Fury.jpg","components/fighters/Kuma.jpg","components/fighters/True Ogre.jpg","components/fighters/Ogre.jpg","components/fighters/Dr. Bosconovitch.jpg","components/card/card.jsx","components/fighterCards/fightercards.jsx","components/searchbar/searchbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","src","fighter","img","alt","name","FighterCards","fighters","map","key","id","SearchBar","placeholder","handleChange","type","onChange","App","state","p1","p2","p3","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13","p14","p15","p16","p17","p18","p19","p20","searchbar","this","searchedFighters","filter","sFighters","toLowerCase","includes","e","setState","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.544a491f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Paul Phoenix.ae23964e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Julia Chang.0a9633bb.png\";","module.exports = __webpack_public_path__ + \"static/media/Jin Kazama.3db5e40c.png\";","module.exports = __webpack_public_path__ + \"static/media/Hwoarang.448cb49e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Nina Williams.7fa55568.jpg\";","module.exports = __webpack_public_path__ + \"static/media/King.4b557de0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Yoshimitsu.05ab0b17.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Marshall Law.be2978bf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Ling Xiaoyu.d055a985.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Lei Wulong.abe510f6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Eddy Gordo.53532f0f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Heihachi Mishima.879b871d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Anna Williams.2de86cf4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Mokujin.721178ff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Gun Jack.7e946642.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Bryan Fury.783f62d5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Kuma.3944c40e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/True Ogre.f051e40c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Ogre.e9f0db9d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Dr. Bosconovitch.a65f646d.jpg\";","import React from 'react';\r\nimport './card.css';\r\n\r\nexport const Card = (props) =>(\r\n        <div className='card-container'>\r\n                <img src={props.fighter.img} alt=\"fighter\"/>\r\n                <h2>{props.fighter.name}</h2>\r\n                </div>\r\n);","import React from 'react';\r\nimport {Card} from '../card/card';\r\n\r\nimport './fightercards.css';\r\n\r\nexport const FighterCards = (props) =>(\r\n<div className='fighterCards'>\r\n    {\r\n    props.fighters.map(fighter => <Card key={fighter.id} fighter={fighter}/>)\r\n    }\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport './searchbar.css';\r\n\r\nexport const SearchBar = ({placeholder, handleChange}) =>(\r\n    <div>\r\n        <input className=\"searchbar\" \r\n        type=\"search\" placeholder={placeholder} \r\n        onChange={handleChange}/>\r\n    </div>\r\n);","import React from 'react';\nimport './App.css';\nimport {FighterCards} from './components/fighterCards/fightercards';\nimport {SearchBar} from './components/searchbar/searchbar';\n\n//==============\n//fighter images\nimport p1 from './components/fighters/Paul Phoenix.jpg';\nimport p2 from './components/fighters/Julia Chang.png';\nimport p3 from './components/fighters/Jin Kazama.png';\nimport p4 from './components/fighters/Hwoarang.jpg';\nimport p5 from './components/fighters/Nina Williams.jpg';\nimport p6 from './components/fighters/King.jpg';\nimport p7 from './components/fighters/Yoshimitsu.jpg';\nimport p8 from './components/fighters/Marshall Law.jpg';\nimport p9 from './components/fighters/Ling Xiaoyu.jpg';\nimport p10 from './components/fighters/Lei Wulong.jpg';\nimport p11 from './components/fighters/Eddy Gordo.jpg';\nimport p12 from './components/fighters/Heihachi Mishima.jpg';\nimport p13 from './components/fighters/Anna Williams.jpg';\nimport p14 from './components/fighters/Mokujin.jpg';\nimport p15 from './components/fighters/Gun Jack.jpg';\nimport p16 from './components/fighters/Bryan Fury.jpg';\nimport p17 from './components/fighters/Kuma.jpg';\nimport p18 from './components/fighters/True Ogre.jpg';\nimport p19 from './components/fighters/Ogre.jpg';\nimport p20 from './components/fighters/Dr. Bosconovitch.jpg';\n//==============\n\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n     fighters:[\n       {name: \"Paul Phoenix\", id:\"f1\", img:p1},\n       {name: \"julia Chang\", id:\"f2\", img:p2},\n       {name: \"Jin Kazama\", id:\"f3\", img:p3},\n       {name: \"Hwoarang\", id:\"f4\", img:p4},\n       {name: \"Nina Williams\", id:\"f5\", img:p5},\n       {name: \"King\", id:\"f6\", img:p6},\n       {name: \"Yoshimitsu\", id:\"f7\", img:p7},\n       {name: \"Marshall Law\", id:\"f8\", img:p8},\n       {name: \"Ling Xiaoyu\", id:\"f9\", img:p9},\n       {name: \"Lei Wulong\", id:\"f10\", img:p10},\n       {name: \"Eddy Gordo\", id:\"f11\", img:p11},\n       {name: \"Heihachi Mishima\", id:\"f12\", img:p12},\n       {name: \"Anna Williams\", id:\"f13\", img:p13},\n       {name: \"Mokujin\", id:\"f14\", img:p14},\n       {name: \"Gun Jack\", id:\"f15\", img:p15},\n       {name: \"Bryan Fury\", id:\"f16\", img:p16},\n       {name: \"Kuma\", id:\"f17\", img:p17},\n       {name: \"True Ogre\", id:\"f18\", img:p18},\n       {name: \"Ogre\", id:\"f19\", img:p19},\n       {name: \"Dr. Bosconovitch\", id:\"f20\", img:p20}\n     ],\n     searchbar:''\n    };\n  }\n\n// componentDidMount(){\n//   fetch('https://jsonplaceholder.typicode.com/users')\n//   .then(response => response.json())\n//   .then(xyz => this.setState({ fighters : xyz }));\n// }\n\nrender(){\n  const {fighters, searchbar} = this.state;\n  const searchedFighters = fighters.filter(sFighters => \n    sFighters.name.toLowerCase().includes(searchbar.toLowerCase()));\n      return (\n      <div className=\"App\">\n        <h1>Tekken</h1>\n        <SearchBar placeholder=\"search fighters\"\n        handleChange={e => this.setState({searchbar : e.target.value})}/>\n        <FighterCards fighters={searchedFighters}/>   \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}